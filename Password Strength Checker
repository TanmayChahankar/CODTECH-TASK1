import re

def check_password_strength(password):
    if not password:
        return "Oops! Looks like you forgot to enter a password."
    elif len(password) < 8:
        return "Your password is too short. It should be at least 8 characters long."

    # Assessing password strength
    length_score = min(len(password) / 8, 1)  # Length contributes to strength

    # Complexity analysis
    complexity_feedback = []
    complexity_score = 0
    if not re.search(r'[A-Z]', password):
        complexity_feedback.append("Try adding uppercase letters.")
    else:
        complexity_score += 0.25
    if not re.search(r'[a-z]', password):
        complexity_feedback.append("Add some lowercase letters.")
    else:
        complexity_score += 0.25
    if not re.search(r'\d', password):
        complexity_feedback.append("Include numbers.")
    else:
        complexity_score += 0.25
    if not re.search(r'[^a-zA-Z0-9]', password):
        complexity_feedback.append("Include special characters like !, @, #, etc.")
    else:
        complexity_score += 0.25

    # Calculating uniqueness
    unique_characters = len(set(password))
    uniqueness_score = min(unique_characters / len(password), 0.5)  # Uniqueness contributes to strength

    # Total score calculation
    total_score = length_score + complexity_score + uniqueness_score

    # Providing feedback based on total score
    if total_score >= 0.8:
        return "Great! Your password is strong."
    elif total_score >= 0.6:
        return "Your password is moderate. Consider making it stronger."
    else:
        feedback = ", ".join(complexity_feedback)
        return "Your password could be stronger. Suggestions: " + feedback

# Example usage
password = input("Enter a password to check its strength: ")
strength = check_password_strength(password)
print(strength)
